/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package pantallas;

import Sockets.Mensaje;
import Sockets.SocketCliente;
import java.io.IOException;
import javax.swing.JOptionPane;

/**
 *
 * @author nomar
 */
public class FrmJugadorDos extends javax.swing.JFrame {
    // Cliente socket para la comunicación con el servidor

    private SocketCliente cliente;

    /**
     * Constructor de la clase FrmJugadorDos. Inicializa los componentes
     * gráficos de la ventana.
     */
    public FrmJugadorDos() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnListo = new javax.swing.JLabel();
        campoTextoUsuarioDos = new javax.swing.JTextField();
        btnAtras = new javax.swing.JLabel();
        fondo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnListo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/btnListo.png"))); // NOI18N
        btnListo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnListo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnListoMouseClicked(evt);
            }
        });
        getContentPane().add(btnListo, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 260, 150, -1));

        campoTextoUsuarioDos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoTextoUsuarioDosActionPerformed(evt);
            }
        });
        getContentPane().add(campoTextoUsuarioDos, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 50, 130, 30));

        btnAtras.setIcon(new javax.swing.ImageIcon(getClass().getResource("/btnAtras.png"))); // NOI18N
        btnAtras.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAtras.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAtrasMouseClicked(evt);
            }
        });
        getContentPane().add(btnAtras, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 40, -1, -1));

        fondo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PantallaJugador.png"))); // NOI18N
        getContentPane().add(fondo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAtrasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAtrasMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_btnAtrasMouseClicked
    /**
     * Evento que se ejecuta cuando se hace clic en el botón "Listo".
     *
     * Realiza las siguientes acciones: - Valida que el campo de texto no esté
     * vacío. - Crea la conexión con el servidor (localhost, puerto 12345). -
     * Envía el nombre del jugador 2 al servidor en un mensaje JSON. - Recibe el
     * nombre del jugador rival desde el servidor. - Muestra un mensaje de
     * conexión exitosa con el nombre del rival. - Abre la ventana para colocar
     * las naves (ColocarNave2). - Cierra esta ventana actual.
     *
     * En caso de error muestra un mensaje y vuelve a habilitar el botón.
     */
    private void btnListoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnListoMouseClicked
        // TODO add your handling code here:
        try {
            btnListo.setEnabled(false);
            cliente = new SocketCliente();
            cliente.conectar("127.0.0.1", 12345);

            String nombreJugador2 = campoTextoUsuarioDos.getText().trim();
            if (nombreJugador2.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Ingresa tu nombre.");
                btnListo.setEnabled(true);
                return;
            }

            // Enviar el nombre del jugador 1 al servidor en un mensaje JSON
            Mensaje mensajeNombre = new Mensaje("nombre", nombreJugador2);
            cliente.enviarMensaje(mensajeNombre);

            // Recibir el nombre del jugador 2 desde el servidor
            Mensaje mensajeRecibido = cliente.recibirMensaje();
            String nombreRival = (String) mensajeRecibido.getContenido().toString();

            JOptionPane.showMessageDialog(this, "Conectado con: " + nombreRival);

            // Abrir ventana para colocar las naves
            ColocarNave2 ventana = new ColocarNave2(nombreJugador2, cliente);
            ventana.setLocation(960, 250);
            ventana.setVisible(true);
            dispose();

        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al conectar: " + e.getMessage());
            e.printStackTrace();
            btnListo.setEnabled(true);
        }
    }//GEN-LAST:event_btnListoMouseClicked

    private void campoTextoUsuarioDosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoTextoUsuarioDosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoTextoUsuarioDosActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmJugadorDos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmJugadorDos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmJugadorDos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmJugadorDos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmJugadorDos().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel btnAtras;
    private javax.swing.JLabel btnListo;
    private javax.swing.JTextField campoTextoUsuarioDos;
    private javax.swing.JLabel fondo;
    // End of variables declaration//GEN-END:variables
}
